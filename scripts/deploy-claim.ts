/**
 * –î–µ–ø–ª–æ–π ClaimManager:
 *  - code: —á–∏—Ç–∞—î–º–æ –∑ .code.boc (Tact –∞—Ä—Ç–µ—Ñ–∞–∫—Ç)
 *  - data: —á–µ—Ä–µ–∑ claimManagerConfigToCell({ owner, jettonMaster })
 *  - –≤—ñ–¥–ø—Ä–∞–≤–∫–∞: –ø—Ä—è–º–∏–π internal –∑ stateInit –∑ Wallet V4
 *
 * ENV:
 *  - MNEMONIC="word1 ... word24"
 *  - NETWORK=mainnet|testnet
 *  - OWNER_ADDRESS="EQ..."
 *  - JETTON_WALLET="EQ..."   (—Ç–∏–º—á–∞—Å–æ–≤–æ –º–æ–∂–Ω–∞ OWNER)
 */

import fs from "fs";
import path from "path";
import { Address, Cell, contractAddress, toNano, internal, beginCell } from "ton-core";
import { TonClient, WalletContractV4 } from "ton";
import { mnemonicToPrivateKey } from "ton-crypto";
import { getHttpEndpoint } from "@orbs-network/ton-access";

// eslint-disable-next-line @typescript-eslint/no-var-requires
const W: any = require("../wrappers/ClaimManager"); // { ClaimManager, claimManagerConfigToCell }

type InitData = { code: Cell; data: Cell };

function loadCodeFromArtifacts(): Cell {
  const candidates = [
    path.join(__dirname, "..", "contracts", "contracts", "build", "ClaimManager.tact_ClaimManager.code.boc"),
    path.join(__dirname, "..", "contracts", "build", "ClaimManager.tact_ClaimManager.code.boc"),
    path.join(__dirname, "..", "build", "ClaimManager.code.boc"),
  ];
  for (const p of candidates) {
    try {
      const bytes = fs.readFileSync(p);
      const cell = Cell.fromBoc(bytes)[0];
      if (cell && typeof (cell as any).toBoc === "function") return cell;
    } catch {}
  }
  throw new Error("–ù–µ –∑–Ω–∞–π—à–æ–≤ .code.boc —É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö —à–ª—è—Ö–∞—Ö. –ü–µ—Ä–µ–≤—ñ—Ä, —â–æ —Ñ–∞–π–ª —ñ—Å–Ω—É—î.");
}

function buildInit(owner: Address, jw: Address): InitData {
  const configToCell = W.claimManagerConfigToCell;
  if (!configToCell) {
    throw new Error("–û—á—ñ–∫—É—é wrappers/ClaimManager –µ–∫—Å–ø–æ—Ä—Ç claimManagerConfigToCell");
  }
  const code = loadCodeFromArtifacts();
  const data = configToCell({ owner, jettonMaster: jw }) as Cell; // —É —Ç–≤–æ—ó–π –æ–±–≥–æ—Ä—Ç—Ü—ñ –ø–æ–ª–µ –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è jettonMaster
  return { code, data };
}

async function main() {
  const MNEMONIC = process.env.MNEMONIC!;
  const NETWORK = (process.env.NETWORK || "mainnet") as "mainnet" | "testnet";
  const OWNER = Address.parse(process.env.OWNER_ADDRESS!);
  const JW = Address.parse(process.env.JETTON_WALLET!);

  if (!MNEMONIC || !OWNER || !JW) {
    throw new Error("–ü–æ—Ç—Ä—ñ–±–Ω—ñ ENV: MNEMONIC, OWNER_ADDRESS, JETTON_WALLET, NETWORK");
  }

  const endpoint = await getHttpEndpoint({ network: NETWORK });
  const client = new TonClient({ endpoint });

  const keys = await mnemonicToPrivateKey(MNEMONIC.trim().split(/\s+/));
  const wallet = WalletContractV4.create({ workchain: 0, publicKey: keys.publicKey });
  const openedWallet = client.open(wallet);

  // –ü–∞–∫—É—î–º–æ init —ñ –∞–¥—Ä–µ—Åy
  const init = buildInit(OWNER, JW);
  const address = contractAddress(0, init);

  console.log("üß± ClaimManager address:", address.toString());

  // –†—É—á–Ω–∏–π –¥–µ–ø–ª–æ–π: internal —ñ–∑ stateInit (init), –ø—É—Å—Ç–µ —Ç—ñ–ª–æ
  const seqno = await openedWallet.getSeqno();
  await openedWallet.sendTransfer({
    seqno,
    secretKey: keys.secretKey,
    messages: [
      internal({
        to: address,
        value: toNano("0.05"),
        init,                 // <<<<<< –í–ê–ñ–õ–ò–í–û: —Ç—É—Ç code+data
        body: new Cell(),     // –ø–æ—Ä–æ–∂–Ω—î —Ç—ñ–ª–æ
        bounce: false,
      }),
    ],
  });

  console.log("‚úÖ –î–µ–ø–ª–æ–π –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ. –ê–¥—Ä–µ—Å–∞:", address.toString());
}

main().catch((e) => {
  console.error(e);
  process.exit(1);
});

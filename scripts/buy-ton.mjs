// scripts/buy-ton.mjs
// –í—ñ–¥–ø—Ä–∞–≤–ª—è—î TON –Ω–∞ –∞–¥—Ä–µ—Å—É –ø—Ä–æ–¥–∞–∂—É –∑ –≤–∞—à–æ–≥–æ seed (mnemonic) –≥–∞–º–∞–Ω—Ü—è.
// –ü–†–ê–¶–Æ–ô–¢–ï –õ–ò–®–ï –ó –¢–ï–°–¢–û–í–ò–ú–ò –§–†–ê–ó–ê–ú–ò –ê–ë–û –ó –ö–ò–®–ï–ù–ï–Æ –ë–ï–ó–ü–ï–ß–ù–û–Æ –î–õ–Ø –í–ê–°.

import { TonClient, WalletContractV4, internal, toNano, Address, beginCell } from "ton";
import { mnemonicToPrivateKey } from "ton-crypto";
import { getHttpEndpoint } from "@orbs-network/ton-access";

async function main() {
  const {
    MNEMONIC,               // 24 —Å–ª–æ–≤–∞ (–∞–±–æ 12) —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª
    SALE_ADDRESS,           // –∞–¥—Ä–µ—Å–∞-–æ–¥–µ—Ä–∂—É–≤–∞—á (EQ.. / UQ..)
    AMOUNT_TON,             // —Å—É–º–∞ –≤ TON, –Ω–∞–ø—Ä. "0.3"
    COMMENT = "",           // –∫–æ–º–µ–Ω—Ç–∞—Ä (–Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ)
    NETWORK = "mainnet",    // "mainnet" –∞–±–æ "testnet"
  } = process.env;

  if (!MNEMONIC || !SALE_ADDRESS || !AMOUNT_TON) {
    console.error("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è: MNEMONIC, SALE_ADDRESS, AMOUNT_TON [, COMMENT] [, NETWORK]");
    process.exit(1);
  }

  // –í–∏–±—ñ—Ä –ø—É–±–ª—ñ—á–Ω–æ–≥–æ –µ–Ω–¥–ø–æ–π–Ω—Ç—É –º–µ—Ä–µ–∂—ñ
  const endpoint = await getHttpEndpoint({ network: NETWORK });
  const client = new TonClient({ endpoint });

  // –ö–ª—é—á—ñ –∑ –º–Ω–µ–º–æ–Ω—ñ–∫–∏
  const keyPair = await mnemonicToPrivateKey(MNEMONIC.trim().split(/\s+/));

  // –°—Ç–≤–æ—Ä—é—î–º–æ Wallet v4
  const wallet = WalletContractV4.create({ workchain: 0, publicKey: keyPair.publicKey });
  const contract = client.open(wallet);

  // –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –∞–¥—Ä–µ—Å—É –≥–∞–º–∞–Ω—Ü—è –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞
  const senderAddr = wallet.address.toString({ testOnly: NETWORK === "testnet" });
  console.log("üë§ –í–∞—à –≥–∞–º–∞–Ω–µ—Ü—å:", senderAddr);

  // –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –±–∞–ª–∞–Ω—Å (—ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ)
  const bal = await client.getBalance(wallet.address);
  console.log("üí∞ –ë–∞–ª–∞–Ω—Å:", Number(bal) / 1e9, "TON");

  // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  const to = Address.parse(SALE_ADDRESS);
  const value = toNano(AMOUNT_TON);

  let body;
  if (COMMENT) {
    // –ö–æ–º–µ–Ω—Ç–∞—Ä —è–∫ text comment (–æ–ø–∫–æ–¥ 0)
    body = beginCell().storeUint(0, 32).storeStringTail(COMMENT).endCell();
  }

  const seqno = await contract.getSeqno();

  console.log(`‚û°Ô∏è  –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ ${AMOUNT_TON} TON ‚Üí ${to.toString()}`);
  if (COMMENT) console.log(`üìù –ö–æ–º–µ–Ω—Ç–∞—Ä: ${COMMENT}`);

  await contract.sendTransfer({
    secretKey: keyPair.secretKey,
    seqno,
    messages: [
      internal({
        to,
        value,
        body,          // –º–æ–∂–µ –±—É—Ç–∏ undefined, —è–∫—â–æ –±–µ–∑ –∫–æ–º–µ–Ω—Ç—É
        bounce: false, // –Ω–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ —Ü–µ –∑–æ–≤–Ω—ñ—à–Ω—ñ–π –≥–∞–º–∞–Ω–µ—Ü—å
      }),
    ],
  });

  console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞. –ü–µ—Ä–µ–≤—ñ—Ä —á–µ—Ä–µ–∑ explorer.");
}

main().catch((e) => {
  console.error("‚ùå –ü–æ–º–∏–ª–∫–∞:", e);
  process.exit(1);
});
